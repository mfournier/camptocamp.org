// These functions aim at providing support for:
// - versioning images when referenced inside the css by prefixing a hash of the file
//   eg /32b4ed33/static/images/image.png
// - inlining image in css via data uri in order to save requests overhead
// - handling device pixel ratio and deliver scaled background images

// Regarding device pixel ratio support:
// - using media queries directly in the link tag would
//   be great, but the browsers will download all css
//   even if pixel ration isn't going to change, which
//   we want to avoid (that would download all images versions...)
//   and we thus rely on javascript in the head
// - also, as we have a fallback for using standard image if
//   hdpi version is not found
// - when using standard image instead of hdpi, a warning is raised

// see c2c_sass_functions.rb
// for the definition of c2chash and datauri functions

// return datauri of file
@function -c2c-datauri($file) {
  @return datauri($file);
}

// return url+hash of file
@function -c2c-hashurl($file) {
  @return c2chash($file);
}

// return background property with image
// as datauri and set background-size if appropriate
@mixin -c2c-datauri-background($file, $suffix: null) {
  @include -c2c-background('datauri', $file, $suffix);
}

// return background property with image
// as hash+url and set background-size if appropriate
@mixin -c2c-hashurl-background($file, $suffix: null) {
  @include -c2c-background('hashurl', $file, $suffix);
}

// return background property with image as datauri
// in standard version and hash+url in mobile one
// and set background-size if appropriate
@mixin -c2c-datauri-for-standard-only-background($file, $suffix: null) {
  @if $mobile {
    @include -c2c-background('hashurl', $file, $suffix);
  } @else {
    @include -c2c-background('datauri', $file, $suffix);
  }
}

@mixin -c2c-background($type, $file, $suffix) {
  $property: background;
  $url: null;
  @if $type == 'hashurl' {
    $url: url(c2chash($file, $pixelratio))
  } @else {
    $url: url(datauri($file, $pixelratio))
  }
  @if $suffix == null {
    background-image: $url;
  } @else {
    background: $url $suffix;
  }
  @include -c2c-background-size($file);
}

// if device pixel ratio != 1
// include background-size
@mixin -c2c-background-size($file) {
  @if $pixelratio != 1 {
    $sizes: file_dimensions($file);
    @include experimental(background-size, $sizes, -moz, -webkit, -o, not -ms, not -khtml);
  }
}

// return datauri for standard version
// and url+hash for mobile version
// This is useful for images that are to be included
// for standard version, but will be very rarely used
// in mobile version (usually not in the interface, but
// some articles might use the pictos)
@function -c2c-datauri-for-standard-only($file) {
  @if $mobile {
    @return c2chash($file);
  } @else {
    @return datauri($file);
  }
}
